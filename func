#include "utils.h"

#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include <stdio.h>
#include <algorithm>
#include "windows.h"


int m = 32;

__device__ void clamp(int & pos, int maxpos) {
	pos = pos > 0 ? pos : 0;
	pos = pos < (maxpos - 1) ? pos : (maxpos - 1);
}


  
__global__
	void gaussian_blur(const unsigned char* const inputChannel,
	unsigned char* const outputChannel,
		int numRows, int numCols,
		const float* const filter, const int filterWidth)
{

	// NOTE: Be sure to compute any intermediate results in floating point
	// before storing the final result as unsigned char.
	// NOTE: Be careful not to try to access memory that is outside the bounds of
	// the image. You'll want code that performs the following check before accessing
	// GPU memory:
	//
	// if ( absolute_image_position_x >= numCols ||
	//      absolute_image_position_y >= numRows )
	// {
	//     return;
	// }
	// NOTE: If a thread's absolute position 2D position is within the image, but some of
	// its neighbors are outside the image, then you will need to be extra careful. Instead
	// of trying to read such a neighbor value from GPU memory (which won't work because
	// the value is out of bounds), you should explicitly clamp the neighbor values you read
	// to be within the bounds of the image. If this is not clear to you, then please refer
	// to sequential reference solution for the exact clamping semantics you should follow.
	const int2 thread_2D_pos = make_int2(blockIdx.x * blockDim.x + threadIdx.x,
		blockIdx.y * blockDim.y + threadIdx.y);

	if (thread_2D_pos.x >= numCols || thread_2D_pos.y >= numRows) return;
		int thread_1d_pos = thread_2D_pos.y * numCols + thread_2D_pos.x;
	
	int halfWidth = filterWidth / 2;
	float value_final = 0.0f;
	for (int y = 0; y < filterWidth; y++) {
		for (int x = 0; x < filterWidth; x++) {
		int image_r = static_cast<int>(thread_2D_pos.y + (y - halfWidth));
		clamp(image_r, numRows);
		int image_c = static_cast<int>(thread_2D_pos.x + (x - halfWidth));
		clamp(image_c, numCols);

		value_final += filter[y*filterWidth + x] * static_cast<float>(inputChannel[image_r*numCols + image_c]);
		}
	}
	outputChannel[thread_1d_pos] = value_final;
	
	


}
